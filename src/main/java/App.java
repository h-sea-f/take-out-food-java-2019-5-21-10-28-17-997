import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
       List<Item> list=this.itemRepository.findAll();
        List<SalesPromotion> saleList=this.salesPromotionRepository.findAll();
       HashMap<Item,Integer> map=new HashMap<>();
       for(int i=0;i<inputs.size();i++){
           String[] inputsItem=inputs.get(i).split(" x ");
           for(int j=0;j<list.size();j++){
               if(inputsItem[0].equals(list.get(j).getId())){
                   map.put(list.get(j), Integer.parseInt(inputsItem[1]));
                   break;
               }
           }
       }

       int oldSum=0;
        for (Map.Entry<Item,Integer> entry : map.entrySet()) {
            oldSum+=(int)entry.getKey().getPrice()*entry.getValue();
        }

        int first=first(map);
        int second=second(map,saleList.get(1).getRelatedItems());
        if(first!=-1&&second!=-1){
            if(first<=second) return firstString(map,oldSum,first);
            else return secondString(map,oldSum,second,saleList.get(1).getRelatedItems());
        }
        if(first==-1&&second!=-1) return this.secondString(map,oldSum,second,saleList.get(1).getRelatedItems());
        if(first!=-1&&second==-1) return this.firstString(map,oldSum,first);
        if(first==-1&&second==-1) return this.noFav(map,oldSum);
        return null;
    }
    public int first(Map<Item,Integer>map){
        int sum=0;
        for (Map.Entry<Item,Integer> entry : map.entrySet()) {
//            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
            sum+=(int)entry.getKey().getPrice()*entry.getValue();
        }
        if(sum<30) return -1;
        else{
            int i=(int)sum/30;
            return sum-6*i;
        }
    }
    public int second(Map<Item,Integer>map,List<String> relatedItems){
      int sum=0;
      int secondFlag=0;
        for (Map.Entry<Item,Integer> entry : map.entrySet()) {
//            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
            int flag=0;
            for(int i=0;i<relatedItems.size();i++){
                if(entry.getKey().getId()==relatedItems.get(i)) {
                    flag=1;
                    secondFlag=1;
                    break;
                }
            }
            if(flag==0) sum+=(int)entry.getKey().getPrice()*entry.getValue();
            if(flag==1) sum+=((int)entry.getKey().getPrice()/2)*entry.getValue();
        }
      if(secondFlag==1) return sum;
       else return -1;
    }
    public String firstString(Map<Item,Integer>map,int oldSum,int sum){
        String index="============= 订餐明细 =============\n";
        for (Map.Entry<Item,Integer> entry : map.entrySet()){
            int price=(int)entry.getKey().getPrice()*entry.getValue();
            index+=entry.getKey().getName()+" x "+entry.getValue()+" = "+price+"元\n";
        }
        int fav=oldSum-sum;
        index+="-----------------------------------\n"+"使用优惠:\n" + "满30减6元，省"+ fav+"元\n-----------------------------------\n";
        index+="总计："+sum+"元\n" + "===================================";
//        System.out.println(index);
        return index;
    }
    public String secondString(Map<Item,Integer> map,int oldSum,int sum,List<String> relatedItems){
        String itemString="";
        String index="============= 订餐明细 =============\n";
        for (Map.Entry<Item,Integer> entry : map.entrySet()) {
            for(int i=0;i<relatedItems.size();i++){
                if(entry.getKey().getId().equals(relatedItems.get(i))) {
                    itemString+=entry.getKey().getName()+'，';
                }
            }
        }
        itemString = itemString.substring(0,itemString.length()- 1);
        for (Map.Entry<Item,Integer> entry : map.entrySet()){
            int price=(int)entry.getKey().getPrice()*entry.getValue();
            index+=entry.getKey().getName()+" x "+entry.getValue()+" = "+price+"元\n";
        }
        int fav=oldSum-sum;
        index+="-----------------------------------\n"+"使用优惠:\n" + "指定菜品半价("+itemString+")，省"+ fav+"元\n-----------------------------------\n";
        index+="总计："+sum+"元\n" + "===================================";
        return index;
    }
    public String noFav(Map<Item,Integer> map,int oldSum){
        String index="============= 订餐明细 =============\n";
        for (Map.Entry<Item,Integer> entry : map.entrySet()){
            int price=(int)entry.getKey().getPrice()*entry.getValue();
            String string=entry.getKey().getName()+" x "+entry.getValue()+" = "+price+"元\n";
            index+=string;
        }
        index+="-----------------------------------\n";
        index+="总计："+oldSum+"元\n" + "===================================";
        return index;
    }
}
